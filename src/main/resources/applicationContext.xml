<?xml version="1.0" encoding="UTF-8"?>
<!-- Application context definition for PetClinic on Hibernate. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}">
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="150" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="20" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="30" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="10" />
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
		<property name="maxWait" value="1000" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="10" />
		<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
		<property name="minEvictableIdleTimeMillis" value="10000" />
	</bean>


	<!-- Hibernate SessionFactory ： 1.连接池 2.映射文件 3.其他Hibernate属性 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">

		<!-- 2.配置映射文件 -->
		<property name="mappingLocations" value="classpath*:com/yjh/pss/domain/*.hbm.xml" />
		<!-- 3.其他Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!--开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!--开启查询缓存:只能对没有查询条件的使用 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!--设置供应商实现类 -->
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
			</props>
		</property>
		<!-- 统一配置二级缓存domain -->
		<property name="entityCacheStrategies">
			<props>
				<prop key="com.yjh.pss.domain.Department">read-write</prop>
				<prop key="com.yjh.pss.domain.Permission">read-write</prop>
				<prop key="com.yjh.pss.domain.Role">read-write</prop>
			</props>
		</property>
		<!-- 统一配置二级缓存domain的集合 -->
		<property name="collectionCacheStrategies">
			<props>
				<prop key="com.yjh.pss.domain.Role.permissions">read-write</prop>
				<prop key="com.yjh.pss.domain.Role.menus">read-write</prop>
				<prop key="com.yjh.pss.domain.Employee.roles">read-write</prop>
			</props>
		</property>
	</bean>


	<!-- 添加事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 切入点 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.yjh.pss.service.I*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<!-- 事务属性 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 只读事务或者没有事务 -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<!-- 必须有事务 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 导入外部配置文件 -->
	<import resource="classpath:manager/*Context.xml" />
	
</beans>
